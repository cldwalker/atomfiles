'atom-text-editor.vim-mode-plus.normal-mode[data-grammar="source clojure"]':
  'g f':          'chlorine:go-to-var-definition'
  'ctrl-d':       'chlorine:doc-for-var'
  'space c':      'chlorine:connect-clojure-socket-repl'
  'space C':      'chlorine:clear-console'
  'shift-enter':  'chlorine:evaluate-block'
  'ctrl-enter':   'chlorine:evaluate-top-block'
  'space space':  'inline-results:clear-all'
  'space x':      'chlorine:run-tests-in-ns'
  'space t':      'chlorine:run-test-for-var'

'atom-text-editor.vim-mode-plus.visual-mode[data-grammar="source clojure"]':
  'alt-enter':    'chlorine:evaluate-selection'

'atom-text-editor.vim-mode-plus.insert-mode[data-grammar="source clojure"]':
  'shift-enter': 'chlorine:evaluate-block'
  'ctrl-enter': 'chlorine:evaluate-top-block'

# normal mode important since w/o space KEY stalls in insert mode
'atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="clojure"], atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="lisp"], atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="newlisp"], atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="racket"], atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="scheme"]':
  'space ,': 'lisp-paredit:barf-forwards'
  'space .': 'lisp-paredit:slurp-forwards'
  'space <': 'lisp-paredit:slurp-backwards'
  'space >': 'lisp-paredit:barf-backwards'
  'space |': 'lisp-paredit:split'
  'space s': 'lisp-paredit:splice'
  'space (': 'lisp-paredit:wrap-around-parens'
  'space {': 'lisp-paredit:wrap-around-curly'
  'space j': 'lisp-paredit:down-sexp'
  'space k': 'lisp-paredit:up-sexp'
  'space l': 'lisp-paredit:forward-sexp'
  'space h': 'lisp-paredit:backward-sexp'

'atom-text-editor.vim-mode-plus.visual-mode[data-grammar~="clojure"]':
  'space /': 'lisp-paredit:expand-selection'
