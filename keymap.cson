## Clojure + Lisp
## ==============
# Most of the keybindings here take into account vim-mode.
# If you don't use vim you can just drop the vim-mode selectors
# e.g. atom-text-editor.vim-mode-plus.normal-mode -> atom-text-editor
#
'atom-text-editor.vim-mode-plus.normal-mode[data-grammar="source clojure"]':
  'g f':          'chlorine:go-to-var-definition'
  'ctrl-d':       'chlorine:doc-for-var'
  'space c':      'chlorine:connect-clojure-socket-repl'
  'space C':      'chlorine:clear-console'
  'shift-enter':  'chlorine:evaluate-block'
  'ctrl-enter':   'chlorine:evaluate-top-block'
  'space space':  'inline-results:clear-all'
  'space x':      'chlorine:run-tests-in-ns'
  'space t':      'chlorine:run-test-for-var'

'atom-text-editor.vim-mode-plus.visual-mode[data-grammar="source clojure"]':
  'alt-enter':    'chlorine:evaluate-selection'

'atom-text-editor.vim-mode-plus.insert-mode[data-grammar="source clojure"]':
  'shift-enter': 'chlorine:evaluate-block '
  'ctrl- enter': 'chlorine:evaluate-top-block'
  'enter':       'lisp-paredit:newline'
  'tab':         'lisp-paredit:indent'

# Normal-mode important since w/o it 'space' acts as leader key in insert mode
# and then requires 2 spaces to create a space
'atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="clojure"], atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="lisp"], atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="newlisp"], atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="racket"], atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="scheme"]':
  'space ,': 'lisp-paredit:barf-forwards'
  'space .': 'lisp-paredit:slurp-forwards'
  'space <': 'lisp-paredit:slurp-backwards'
  'space >': 'lisp-paredit:barf-backwards'
  'space |': 'lisp-paredit:split'
  'space s': 'lisp-paredit:splice'
  'space (': 'lisp-paredit:wrap-around-parens'
  'space {': 'lisp-paredit:wrap-around-curly'
  'space j': 'lisp-paredit:down-sexp'
  'space k': 'lisp-paredit:up-sexp'
  'space l': 'lisp-paredit:forward-sexp'
  'space h': 'lisp-paredit:backward-sexp'
  # Needed to start selection
  'space /': 'lisp-paredit:expand-selection'
  # Remaps simulate autoindent which was turned off due to bugginess
  'o':       'keystroke o tab'
  'O':       'keystroke O tab'

'atom-text-editor.vim-mode-plus.visual-mode[data-grammar~="clojure"]':
  'space /': 'lisp-paredit:expand-selection'
  'tab':     'lisp-paredit:indent'

'atom-text-editor.vim-mode-plus.insert-mode[data-grammar~="clojure"].autocomplete-active':
  'enter': 'autocomplete-plus:confirm'

## General
## =======
'atom-workspace atom-text-editor':
  # Useful for outlines
  'alt-k': 'editor:move-line-up'
  'alt-j': 'editor:move-line-down'
  'ctrl-i': 'cursor-history:next'
  'ctrl-o': 'cursor-history:prev'

'atom-workspace atom-pane, atom-workspace atom-text-editor:not(.mini)':
  # Pane management
  'ctrl-h': 'window:focus-pane-on-left'
  'ctrl-j': 'window:focus-pane-below'
  'ctrl-k': 'window:focus-pane-above'
  'ctrl-l': 'window:focus-pane-on-right'
  'ctrl-, P': 'choose-pane:start'

  # Open files
  'ctrl-|': 'pane:split-right-and-copy-active-item'
  'ctrl--': 'pane:split-down-and-copy-active-item'

  # Open specific files
  'ctrl-, p': 'settings-view:install-packages-and-themes'
  'ctrl-, i': 'settings-view:view-installed-packages'
  'ctrl-, k': 'application:open-your-keymap'

## Github
## ======
'.github-CommitView-editor atom-text-editor:not([mini])':
  'ctrl-k': 'core:focus-previous'

'.github-StagingView':
  'ctrl-j': 'core:focus-next'
  'ctrl-k': 'core:focus-previous'
