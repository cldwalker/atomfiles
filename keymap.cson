## Keybindings are vim centric though there is an occasional emacs-ism.
## While I have a leader key, I stray from it for often used commands.
## Keybinding conventions:
## * Leader key: ,
##   * This causes a slight lag to type ','. I don't type that enough to care yet
## * Git leader key: alt-g
## * Second leader or sub leader keys are delineated with a prefix comment
##
## Workspace (global) keybindings
## ==============================
'atom-workspace atom-pane, atom-workspace atom-text-editor:not(.mini)':
  # Pane focus + movement
  'ctrl-h': 'window:focus-pane-on-left'
  'ctrl-j': 'window:focus-pane-below'
  'ctrl-k': 'window:focus-pane-above'
  'ctrl-l': 'window:focus-pane-on-right'
  # prefix: p(ane) or p(ackage)
  ', p c': 'choose-pane:start'
  ', p h': 'pane:split-left-and-move-active-item'
  ', p j': 'window:move-active-item-to-pane-on-left'
  ', p k': 'window:move-active-item-to-pane-on-right'
  ', p l': 'pane:split-right-and-move-active-item'
  # package
  ', p i': 'me:install-packages-and-themes-with-focus'
  ', p s': 'me:view-installed-packages-with-focus'
  ', p a': 'package-switch:start-packages'
  ', p d': 'package-switch:stop-packages'
  ', p o': 'open-package:toggle'

  # Pane splitting
  'ctrl-|': 'pane:split-right-and-copy-active-item'
  'ctrl--': 'pane:split-down-and-copy-active-item'

  # Open specific files
  ', k': 'application:open-your-keymap'
  ', c': 'application:open-your-config'
  ', s': 'application:open-your-init-script'

  # prefix: f(ind)
  ', f d': 'project-find:show-in-current-directory'
  ', f f': 'me:project-find-current-word'
  ', f k': 'me:project-find-in-keymap'
  ', f r': 'me:project-find-current-repo'

  # Open misc things
  # Like :e
  ', e': 'advanced-open-file:toggle'
  # prefix: o(pen)
  # Project manipulation
  ', o a': 'project-folder:add'
  ', o r': 'project-folder:remove'

  # prefix: t(oggle)
  ', t l': 'notifications:toggle-log'
  ', t f': 'me:toggle-trace-focus'
  ', t c': 'me:toggle-log-command'

  # Git actions
  'alt-g l': 'git-plus:log-current-file'
  'alt-g L': 'git-plus:log'
  # Using git-plus b/c I can --rebase
  'alt-g P': 'git-plus:pull'
  'alt-g p': 'git-puns:github-push-with-joke'
  'alt-g d': 'git-plus:diff-all'
  'alt-g c': 'git-plus:commit-all'
  'alt-g C': 'open-on-github:copy-url'
  'alt-g a': 'git-plus:commit-amend'
  'alt-g b': 'git-blame:toggle'
  # prefix: s(tash)
  'alt-g s l': 'git-plus:manage-stashes'
  'alt-g s p': 'git-plus:stash-pop'
  'alt-g s s': 'git-plus:stash-save'
  'alt-g s m': 'git-plus:stash-save-message'
  'alt-g s a': 'git-plus:stash-apply'

  # Misc
  ', r':   'window:reload'
  'cmd-b': 'recent-files-fuzzy-finder:toggle-finder'
  ', q':   'core:cancel'

## Misc components
## ===============
'.command-palette':
  'cmd-c': 'me:copy-command'

'.fuzzy-finder atom-text-editor[mini]':
  'cmd-enter': 'me:fuzzy-finder-open-in-place'

'.recent-files-fuzzy-finder atom-text-editor[mini]':
  'cmd-enter': 'me:recent-files-fuzzy-finder-open-in-place'

'.find-and-replace atom-text-editor[mini]':
  ', R': 'me:replace-all-selection'

'.package-detail-view button':
  'enter': 'me:button-press-to-click'

## Misc > Github
'.github-CommitView-editor atom-text-editor:not([mini])':
  'ctrl-k': 'core:focus-previous'

'.github-StagingView':
  'ctrl-j': 'core:focus-next'
  'ctrl-k': 'core:focus-previous'

## Editor
## ======

## Editor > General
'atom-workspace atom-text-editor':
  # Useful for outlines
  'alt-k': 'editor:move-line-up'
  'alt-j': 'editor:move-line-down'
  # Vim-like history
  'ctrl-i': 'cursor-history:next'
  'ctrl-o': 'cursor-history:prev'

  # selections
  # Not using default cmds like editor:add-selection-below b/c they don't
  # work w/ multi-cursor cmds
  'ctrl-shift-k': 'multi-cursor:expandUp'
  'ctrl-shift-j': 'multi-cursor:expandDown'
  # No equivalent default cmd. editor:move-selection-left is close
  # but moves all cursors instead of last one
  'ctrl-shift-h': 'multi-cursor:move-last-cursor-left'
  'ctrl-shift-l': 'multi-cursor:move-last-cursor-right'

  # prefix: a(lignment)
  ', a r': 'align-regexp:align-selection'
  ', a s': 'simple-align:align'
  ', a a': 'aligner:align'

## Editor > Normal-mode enhancements
## =================================
'atom-text-editor.vim-mode-plus.normal-mode':
  # Use bookmark commands under mark keycombo
  'm l': 'bookmarks:view-all'
  'm t': 'bookmarks:toggle-bookmark'
  'm n': 'bookmarks:jump-to-next-bookmark'
  'm p': 'bookmarks:jump-to-previous-bookmark'

## Editor > JS
## ===========
'atom-text-editor[data-grammar="source js"]':
  # prefix: j(s- eval)
  ', j e': 'me:eval-js'
  ', j f': 'me:eval-js-file'
  ', j t': 'me:toggle-console-or-notification'

## Editor > Clojure + Lisp
## =======================
# Most of the keybindings here take into account vim-mode.
# If you don't use vim you can just drop the vim-mode selectors
# e.g. atom-text-editor.vim-mode-plus.normal-mode -> atom-text-editor
#
'atom-text-editor.vim-mode-plus.normal-mode[data-grammar="source clojure"]':
  'g f':         'chlorine:go-to-var-definition'
  'ctrl-d':      'chlorine:doc-for-var'
  'space c':     'chlorine:connect-clojure-socket-repl'
  'space C':     'chlorine:clear-console'
  'shift-enter': 'chlorine:evaluate-block'
  'ctrl-enter':  'chlorine:evaluate-top-block'
  'space space': 'inline-results:clear-all'
  'space x':     'chlorine:run-tests-in-ns'
  'space t':     'chlorine:run-test-for-var'

'atom-text-editor.vim-mode-plus.visual-mode[data-grammar="source clojure"]':
  'alt-enter':    'chlorine:evaluate-selection'

'atom-text-editor.vim-mode-plus.insert-mode[data-grammar="source clojure"]':
  'shift-enter': 'chlorine:evaluate-block '
  'ctrl-enter':  'chlorine:evaluate-top-block'
  'enter':       'lisp-paredit:newline'
  # Can't just use 'tab' b/c it overrides snippets
  ', tab':       'lisp-paredit:indent'

# Normal-mode important since w/o it 'space' acts as leader key in insert mode
# and then requires 2 spaces to create a space
'atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="clojure"], atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="lisp"], atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="newlisp"], atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="racket"], atom-text-editor.vim-mode-plus.normal-mode[data-grammar~="scheme"]':
  'space ,': 'lisp-paredit:barf-forwards'
  'space .': 'lisp-paredit:slurp-forwards'
  'space <': 'lisp-paredit:slurp-backwards'
  'space >': 'lisp-paredit:barf-backwards'
  'space |': 'lisp-paredit:split'
  'space s': 'lisp-paredit:splice'
  'space (': 'lisp-paredit:wrap-around-parens'
  'space {': 'lisp-paredit:wrap-around-curly'
  'space j': 'lisp-paredit:down-sexp'
  'space k': 'lisp-paredit:up-sexp'
  'space l': 'lisp-paredit:forward-sexp'
  'space h': 'lisp-paredit:backward-sexp'
  # Needed to start selection
  'space /': 'lisp-paredit:expand-selection'
  # Remaps simulate autoindent which was turned off due to bugginess
  'o':       'keystroke o , tab'
  'O':       'keystroke O , tab'

'atom-text-editor.vim-mode-plus.visual-mode[data-grammar~="clojure"]':
  'space /': 'lisp-paredit:expand-selection'
  'tab':     'lisp-paredit:indent'
